//! Client settings

use std::marker::PhantomData;

use arcstr::ArcStr;
use gusket::Gusket;
use serde::{Deserialize, Serialize};
use traffloat::def::{cargo, gas, liquid};
use traffloat::lerp;
use traffloat::space::Vector;
use yew::services::storage;

/// The localStorage key for options
pub const STORAGE_KEY: &str = "traffloat:game_options";

/// All settings for the client, serialized in `localStorage`.
#[derive(Debug, Clone, Serialize, Deserialize, Gusket)]
#[gusket(all)]
pub struct Options {
    /// Graphics settings.
    graphics: Graphics,
}

/// Graphics settings.
#[derive(Debug, Clone, Serialize, Deserialize, Gusket)]
#[gusket(all)]
pub struct Graphics {
    /// Whether stars should be rendered.
    #[gusket(copy)]
    render_stars:      bool,
    /// Whether axis reticle should be rendered.
    #[gusket(copy)]
    render_reticle:    bool,
    /// Whether debug info should be rendered.
    #[gusket(copy)]
    render_debug_info: bool,
    /// Options for node rendering.
    node:              Node,
    /// Options for edge rendering.
    edge:              Edge,
}

/// Node rendering settings.
#[derive(Debug, Clone, Serialize, Deserialize, Gusket)]
#[gusket(all)]
pub struct Node {
    /// Whether nodes should be rendered.
    #[gusket(copy)]
    render:              bool,
    /// The base color to draw upon.
    #[gusket(copy)]
    base:                Vector,
    /// The texture variant name to draw with, or `None` if textures should not be used.
    texture:             Option<ArcStr>,
    /// A color filter based on total cargo storage size of a type in the node,
    /// relative to the largest rendered storage.
    #[gusket(copy)]
    cargo:               Option<(cargo::Id, ColorMap)>,
    /// A color filter based on total liquid storage size of a type in the node,
    /// relative to the largest rendered storage.
    #[gusket(copy)]
    liquid:              Option<(liquid::Id, ColorMap)>,
    /// A color filter based on total gas storage size of a type in the node,
    /// relative to the largest rendered storage.
    #[gusket(copy)]
    gas:                 Option<(gas::Id, ColorMap)>,
    /// A color filter based on electricity used/generated by the node.
    /// The colormap is unevenly scaled into [0, 0.5] and [0.5, 1],
    /// the former mapped to maximum consumption and
    /// the latter mapped to the maximum production.
    #[gusket(copy)]
    electricity_usage:   Option<ColorMap>,
    /// A color filter based on electricity surplus of the electricity grid
    /// that the node belongs to, relative to the largest electricity grid.
    #[gusket(copy)]
    electricity_surplus: Option<ColorMap>,
    /// A color filter based on sunlight received by the node,
    /// relative to the largest rendered brightness.
    #[gusket(copy)]
    brightness:          Option<ColorMap>,
    /// A color filter based on the percentage hitpoint of the node,
    /// relative to the largest rendered percentage hitpoint.
    #[gusket(copy)]
    hitpoint:            Option<ColorMap>,
}

/// Edge rendering settings.
#[derive(Debug, Clone, Serialize, Deserialize, Gusket)]
#[gusket(all)]
pub struct Edge {
    /// Whether nodes should be rendered.
    #[gusket(copy)]
    render:              bool,
    /// The base color to draw upon.
    #[gusket(copy)]
    base:                Vector,
    /// A color filter based on total cargo transfer rate of a type across the edge,
    /// relative to the largest rendered rate.
    #[gusket(copy)]
    cargo:               Option<(cargo::Id, ColorMap)>, // unimplemented
    /// A color filter based on total liquid storage size of a type in the edge,
    /// relative to the largest rendered rate.
    #[gusket(copy)]
    liquid:              Option<(liquid::Id, ColorMap)>, // unimplemented
    /// A color filter based on total gas storage size of a type in the edge,
    /// relative to the largest rendered rate.
    #[gusket(copy)]
    gas:                 Option<(gas::Id, ColorMap)>, // unimplemented
    /// A color filter based on electric current transferred across the edge,
    /// relative to the largest rendered current.
    #[gusket(copy)]
    electricity_current: Option<ColorMap>, // unimplemented
    /// A color filter based on electricity surplus of the electricity grid
    /// that the edge belongs to, relative to the largest electricity grid.
    #[gusket(copy)]
    electricity_surplus: Option<ColorMap>, // unimplemented
    // /// A color filter based on sunlight received by the edge,
    // /// relative to the largest rendered brightness.
    // brightness: Option<ColorMap>,
    /// A color filter based on the percentage hitpoint of the edge,
    /// relative to the largest rendered percentage hitpoint.
    #[gusket(copy)]
    hitpoint:            Option<ColorMap>, // unimplemented

    /// Arguments for reflection rendering.
    #[gusket(copy)]
    reflection: ReflectionArgs,
}

/// A trapezium function.
#[derive(Debug, Clone, Copy, Serialize, Deserialize, derive_new::new, Gusket)]
#[gusket(all)]
pub struct Trapezium {
    /// The scalar value at which this channel starts increasing.
    #[gusket(copy)]
    min_start: f64,
    /// The scalar value at which this channel reaches the maximum.
    #[gusket(copy)]
    max_start: f64,
    /// The scalar value at which this channel starts decreasing.
    #[gusket(copy)]
    max_end:   f64,
    /// The scalar value at which this channel reaches zero.
    #[gusket(copy)]
    min_end:   f64,
    /// The maximum height of the trapezium.
    #[gusket(copy)]
    maximum:   f64,
}

impl Trapezium {
    /// Convert a scalar [0, 1] to the value for this trapezium.
    pub fn convert(&self, value: f64) -> f64 {
        if value <= self.min_start {
            0.
        } else if value <= self.max_start {
            (value - self.min_start) / (self.max_start - self.min_start) * self.maximum
        } else if value < self.max_end {
            self.maximum
        } else if value < self.min_end {
            (self.min_end - value) / (self.min_end - self.max_end) * self.maximum
        } else {
            0.
        }
    }
}

/// Arguments for the Phong reflection model.
#[derive(Debug, Clone, Copy, Serialize, Deserialize, derive_new::new, Gusket)]
#[gusket(all)]
pub struct ReflectionArgs {
    /// Phong ambient weight.
    #[gusket(copy)]
    ambient:       f64,
    /// Phong diffuse weight.
    #[gusket(copy)]
    diffuse:       f64,
    /// Phong specular weight.
    #[gusket(copy)]
    specular:      f64,
    /// Phong ambient coefficient.
    #[gusket(copy)]
    specular_coef: f64,
}

/// A function mapping a scalar [0, 1] to a color [0, 1]^3.
#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum ColorMap {
    /// A linear color value.
    Linear(Vector, Vector),
    /// A colormap formed by three trapeziums.
    Trapeziums([Trapezium; 3]),
}

impl ColorMap {
    /// Convert a scalar [0, 1] to a color [0, 1]^3
    pub fn convert(&self, value: f64) -> Vector {
        match self {
            Self::Linear(low, high) => lerp(*low, *high, value),
            Self::Trapeziums([r, g, b]) => {
                Vector::new(r.convert(value), g.convert(value), b.convert(value))
            }
        }
    }
}

/// Collects statistics to compute the color.
///
/// The `T` type argument is the components queried.
#[derive(derive_new::new)]
pub struct ColorMapCounter<T, F: Fn(T) -> f64> {
    color_map: ColorMap,
    /// The function to convert components to queried type.
    mapper:    F,
    #[new(default)]
    bounds:    Option<(f64, f64)>,
    #[new(default)]
    _ph:       PhantomData<fn(T) -> f64>,
}

impl<T, F: Fn(T) -> f64> ColorMapCounter<T, F> {
    /// Creates an instance, or return `None` if the filter should be unused, indicated by a `None` `color_map`.
    pub fn try_new(color_map: Option<ColorMap>, mapper: F) -> Option<Self> {
        color_map.map(|color_map| Self::new(color_map, mapper))
    }
}

/// A general trait backed by [`ColorMapCounter`] on different closure types,
/// implemented on `Option` to support unused filters.
pub trait ColorMapCount<T> {
    /// Proxies [`Option::is_some`].
    fn is_some(&self) -> bool;

    /// Feed the components into the counter, which forwards to the function for type counting.
    ///
    /// Do not call after using [`ColorMapCount::compute`].
    fn feed(&mut self, comps: T);

    /// Compute the color given the components, using the extrema collected in [`ColorMapCount::feed`].
    ///
    /// Only use after calling [`ColorMapCount::feed`] on all entities.
    fn compute(&self, comps: T) -> Vector;
}

impl<T, F: Fn(T) -> f64> ColorMapCount<T> for Option<ColorMapCounter<T, F>> {
    fn is_some(&self) -> bool { Option::is_some(self) }

    fn feed(&mut self, comps: T) {
        if let Some(this) = self {
            let value = (this.mapper)(comps);
            this.bounds = Some(match this.bounds {
                Some((min, max)) => (min.min(value), max.max(value)),
                None => (value, value),
            })
        }
    }

    fn compute(&self, comps: T) -> Vector {
        if let Some(this) = self {
            let (min, max) = this.bounds.expect("Call to compute() before feeding");

            let value = (this.mapper)(comps);
            let scale = (value - min) / (max - min);
            this.color_map.convert(scale)
        } else {
            Vector::new(1., 1., 1.) // the passthru color filter
        }
    }
}

impl Options {
    /// This method deliberately does not implement [`Default`]
    /// to avoid accidentally overwriting the default initialization.
    pub fn default() -> Self {
        Self {
            graphics: Graphics {
                render_stars:      true,
                render_reticle:    true,
                render_debug_info: true,
                node:              Node {
                    render:              true,
                    base:                Vector::new(1., 1., 1.),
                    texture:             Some(arcstr::literal!("fancy")),
                    cargo:               None,
                    liquid:              None,
                    gas:                 None,
                    electricity_usage:   None,
                    electricity_surplus: None,
                    brightness:          Some(ColorMap::Linear(
                        Vector::new(0.5, 0.5, 0.5),
                        Vector::new(1., 1., 1.),
                    )),
                    hitpoint:            None,
                },
                edge:              Edge {
                    render:              true,
                    base:                Vector::new(0.3, 0.5, 0.8),
                    cargo:               None,
                    liquid:              None,
                    gas:                 None,
                    electricity_current: None,
                    electricity_surplus: None,
                    hitpoint:            None,
                    reflection:          ReflectionArgs {
                        ambient:       0.3,
                        diffuse:       0.2,
                        specular:      1.,
                        specular_coef: 10.,
                    },
                },
            },
        }
    }
}

/// Sets up legion ECS.
pub fn setup_ecs(setup: traffloat::SetupEcs) -> traffloat::SetupEcs {
    let storage =
        storage::StorageService::new(storage::Area::Local).expect("Failed to fetch localStorage");
    let yew::format::Json(options) = storage.restore(STORAGE_KEY);
    let options: Options = options.unwrap_or_else(|_| Options::default());
    setup.resource(options)
}
